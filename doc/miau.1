.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "I2M3806 1"
.TH I2M3806 1 "2006-03-29" "perl v5.8.8" "GNU Info"
.SH "NAME"
miau.info \- miau.info
.SH "miau Manual"
.IX Header "miau Manual"
This is edition 0.6.1 of the `\fBmiau Manual\fR', last updated 7 January 2006.
.PP
* Menu:
.PP
Why you need an irc-bouncer and how it is used: see \*(L"Introduction\*(R"
.PP
How to install miau: see \*(L"Installation\*(R"
.PP
Invocation of miau: see \*(L"Command Line Options\*(R"
.PP
Commands while miau is running: see \*(L"miau Commands\*(R"
.PP
Statements in your miaurc: see \*(L"miaurc Commands\*(R"
.Sh "1 What is an irc\-bouncer?"
.IX Subsection "1 What is an irc-bouncer?"
A bouncer doesn't do anything else than diverting a network\-connection.
.PP
In case of an irc\-bouncer, connections from your irc-program
(client) are diverted by the bouncer to a irc\-server.
.PP
\&\*(L"What is this good for?\*(R", you might ask.
.PP
Well, let's assume you've got a dialup\-connection.  If somebody
performs a `\fB/WHOIS\fR' on you it shows something like \*(L"yournick is
yournick!yourident@dialup66\-r\-v.isp.at\*(R".
.PP
If you are vain you don't want people to see this stupid hostname.
So you get a account on a machine with a cool hostname (from now on
refered as middleman), get miau running there and a /whois on you will
show middleman's hostname, since the connection to the irc-server is
actually originating from middleman.
.PP
Another advantage is that network-attacks aren't really destinating
to \s-1YOUR\s0 computer but to middleman, which is in theory a machine that
can't be brought down.
.PP
2 What makes miau special over other bouncers?
**********************************************
.PP
miau is very straight and simple to set up and the probably most
important and interesting feature is that miau keeps the middleman \->
irc-server connection up even after you disconnect with your client.
.PP
This means miau prevents people from using your nick (this is
especially handy on nets like IRCNet, since there are no services like
on dalnet etc) and tells people who message you that you're not here
and logs what these people said.
.PP
Upon your next connect to miau, it will let the channels you've been
in in your last session pop up, which means that you'll keep your
status in these channels.
.PP
Besides that miau's got a sophisticated flood-protection making it
(almost) impossible to disconnect miau.
.PP
3 Copyright
***********
.PP
miau has been written by Tommi Saviranta <wnd@iki.fi>.  miau branched
from muh, see http://mind.riot.org/muh/.  miau is licensed under the
\&\s-1GPL\s0. See \s-1COPYING\s0 for details.
.Sh "4 Command Line Options"
.IX Subsection "4 Command Line Options"
`\fB\-f\fR'
Stay in foreground (don't fork)
.PP
`\fB\-d directory\fR'
Specifies a different directory than the default for miaurc,
messages and log
.PP
`\fB\-c\fR'
You will be prompted for a word to crypt. The output can be used as
`\fBpassword\fR' in miaurc if you don't wanna have the password stored in
clear text.  Note that you'll still have to authorize with the
unencrypted password.
.PP
This option might not be compiled in.
.Sh "5 miau Commands"
.IX Subsection "5 miau Commands"
miau accepts following commands to be issued by the client via `/MIAU
<command>'.
.PP
Note that some IRC-clients might require a prefix such as `\fB/QUOTE\fR' or
`\fB/RAW\fR' to send commands they don't know about.
.PP
`\fB\s-1HELP\s0\fR'
Display supported commands
.PP
`\fB\s-1READ\s0\fR'
Read received messages
.PP
`\fB\s-1DEL\s0\fR'
Delete all messages
.PP
`\fB\s-1PRINT\s0\fR'
Prints miau's server\-list. Servers prefixed with '+' work, those
with '\-' don't.
.PP
`\fB\s-1JUMP\s0 [servernumber]\fR'
Jump to next server in serverlist. If `\fBservernumber\fR' (see `\fB\s-1PRINT\s0\fR')
is specified, miau will jump to this server (even if marked as not
working).
.PP
`\fB\s-1REHASH\s0\fR'
Reread config\-file. Note that this can also be performed by
sending a `\fB\s-1SIGHUP\s0\fR' to miau (see `\fB\f(BIkill\fB\|(1)\fR'). If `\fBrealname\fR' or
`\fBusername\fR' have been changed miau will reconnect to it's current
server.
.PP
`\fB\s-1DIE\s0 [reason]\fR'
Terminate miau. A quit reason can be given after command.
.PP
`\fB\s-1UPTIME\s0\fR'
Prints uptime of miau.
.PP
This command might not be compiled in.
.PP
`\fB\s-1PINGSTAT\s0\fR'
Prints ping statistics.
.PP
This command might not be compiled in.
.PP
`\fB\s-1DUMP\s0\fR'
Prints some of miau's internal variables. Used for debugging.
.PP
This command might not be compiled in.
.Sh "6 Installation"
.IX Subsection "6 Installation"
Create a `\fB.miau/\fR'\-directory in your homedir and copy `\fBmiaurc\fR' there (it
will probably reside in `\fB/usr/share/miau\fR', depending on your
os/distribution).
.PP
Edit `\fBmiaurc\fR', _make sure noone except you has read\-access_ and
launch miau.
.PP
To make sure miau's running all day there is a script called
`\fBmiau-check\fR' that came with miau. Edit it as well and make `\fB\f(BIcrontab\fB\|(5)\fR'
call it periodically.
.Sh "7 miaurc Commands"
.IX Subsection "7 miaurc Commands"
There are numerous commands with which you can extensively customize
miau's behaviour. The must be placed in the `\fBmiaurc\fR' that miau reads on
startup, it is usually `\fB$HOME/.miau/miaurc\fR'.
.PP
8 Required settings
*******************
.PP
`\fBnicknames = { \*(L"nick\*(R" }\fR'
Your nickname (and secondary nicknames) on \s-1IRC\s0. If the primary
nick (first nick on the list) is already on use, miau will try the
others on the list.
.PP
`\fBrealname = \*(L"realname\*(R"\fR'
Your \*(L"real\*(R" name (which will be shown by `\fB/WHOIS\fR'\-command) on \s-1IRC\s0.
.PP
`\fBusername = \*(L"username\*(R"\fR'
Your ident (matters only if you don't have `\fBidentd\fR' running).
.PP
`\fBpassword = \*(L"password\*(R"\fR'
The password miau will expect to receive from client when it's
registering with nick. If this is 13 characters long, miau assumed
it's crypted. miau can generate password-hashes with `\fB\-c\fR' \-switch,
if it is compiled with that feature.
.PP
`\fBlistenport = \*(L"port\*(R"\fR'
The port miau will wait for incoming connections. This is the port
you connect your IRC-client to.
.PP
`\fBservers = { \*(L"server\*(R":\*(L"port\*(R":\*(L"password\*(R":\*(L"timeout\*(R" }\fR'
miau's IRC\-server\-list. Each line represents one server, where
timeout is delay in seconds before connectiong attempt times out.
Only `\fBserver\fR' parameter is required.
.PP
`\fBconnhosts = { \*(L"host\*(R":\*(L"permitted\*(R" }\fR'
List of hosts that are allowed (or denied) to connect to miau. When
`\fBpermitted\fR' is left unset, it is assumed to be `\fBtrue\fR'. This list
will be processed as a chain which means latter rules can override
previous ones.
.PP
Note: You can define \*(L"your\*(R" hostname with `\fB@@\fR'. Only the _last_
occurance of `\fB@@\fR' will be translated.
.PP
9 Optional settings
*******************
.PP
`\fBstatelog = \*(L"state\*(R"\fR'
Should miau write state log to `\fB$MIAUDIR/log\fR'? When true, log will
be written in this file. If set to false, the same stuff is
printed on `\fBstdout\fR' (on terminal).
.PP
`\fBlistenhost = \*(L"host\*(R"\fR'
Host miau uses to listen on.  If you are compiled with \s-1IPV6\s0 and
need this to listen on an \s-1IPV4\s0 port, you must use an \s-1IP\s0 in the
form `\fB::FFFF:127.0.0.1\fR'.
.PP
`\fBfloodtimer = \*(L"number\*(R"\fR'
Time it takes to send one message. When configuring
flood\-protection, this variable defined how fast you can send
messages; how many seconds sending one message takes. See also
`\fBburstsize\fR'.
.PP
`\fBburstsize = \*(L"number\*(R"\fR'
How many messages can be sent at once. When configuring
flood\-protection, this variable defined how many messages can be
sent at once (in a burst). See also `\fBfloodtimer\fR'.
.PP
`\fBjointries = \*(L"number\*(R"\fR'
Number of tries to join channel after dropping from server etc.
miau tries to join channels once a minute.
.PP
`\fBbind = \*(L"host\*(R"\fR'
Host/IP miau uses for outgoing connections.
.PP
`\fBmaxclients = \*(L"number\*(R"\fR'
Maximum number of clients connected to miau concurrently. Set to
zero for unlimited clients.
.PP
`\fBstonedtimeout = \*(L"seconds\*(R"\fR'
Time (in seconds) with no data from the server before it is
declared stoned and being disconnected. Although minimum value is
30, this value has no upper limit. Watch out, though, if this
value is set too high, death of servers may stay undetected for a
very long time if you are idle.
.PP
`\fBconnecttimeout = \*(L"seconds\*(R"\fR'
Time (in seconds) before connection attampt will time out. Note
that while connecting to the server miau will not respond to
clients. Minimum value is 5, and many systems define maximum value.
.PP
`\fBchannels = { \*(L"channel\*(R":\*(L"keyword\*(R" }\fR'
List of channels to join.
.PP
`\fBrejoin = \*(L"state\*(R"\fR'
Rejoin channels after disconnecting from the server.  If `\fBrejoin\fR'
is set to `\fBtrue\fR', channels defined in `\fBchannels\fR'" are also joined
when client first time connects to miau.
.PP
`\fBleave = \*(L"state\*(R"\fR'
Leave channels when all clients have detached from miau.  If
`\fBleave\fR' is set to `\fBfalse\fR' and `\fBrejoin\fR' is set to `\fBtrue\fR', channels
defined at `\fBchannels\fR' will be joined at miau startup.  If both
`\fBleave\fR' and `\fBrejoin\fR' is set to `\fBtrue\fR', channels that are left at
client detach, are rejoined when client attached back to miau.
.PP
`\fBleavemsg = \*(L"message\*(R"\fR'
Message miau will either use as PART-message or as \s-1ACTION\s0 when all
clients have detached from miau. If unset or set to empty, no
message will be shown. Note that many people dislike event-based
messages (which happens when `\fBleave\fR' is set to `\fBfalse\fR' and
`\fBleavemsg\fR' is set). Note that commenting this option out and
rehashing after `\fBleavemsg\fR' was set, this option is _not_ reverted.
To disable `\fBleavemsg\fR' afterwards you need to write an empty string
here and rehash. Also see `\fBusequitmsg\fR'.
.PP
`\fBawaymsg = \*(L"message\*(R"\fR'
Text that will be set to miau's away-reason when all clients have
detached from miau. If unset or set to empty, AWAY-status will be
left untouched. When any client attaches back to miau, AWAY-status
will be reset. Note that is user sets him/herself away, miau will
_not_ touch away-status nor message neither when connecting to or
disconnected from miau. Also note that commenting this option out
and rehashing after `\fBawaymsg\fR' was set, this option is _not_
reverted. To disable `\fBawaymsg\fR' afterwards you need to write an
empty string here and rehash. Also see `\fBusequitmsg\fR'.
.PP
`\fBusequitmsg = \*(L"state\*(R"\fR'
Use last quit-reason as away-reason and/or leave-message (if
respective options are enabled) when all clients have disconnected
from miau. If quit-reason was empty, default values of awaymsg and
leavemsg will be used, otherwise most recent quit-message
overrides values in miaurc.
.PP
`\fBautoaway = \*(L"mode\*(R"\fR'
miau can set user away automatically. This option allows to define
when to do that:
`\fBnever\fR'
Never set user away automatically
.PP
`\fBdetach\fR'
Set user away when any of the clients disconnects
.PP
`\fBnoclients\fR'
Set user away when the last client disconnects
If `\fBusequitmsg\fR' is set, quit message will be used as a reason.  If
not, `\fBawaymsg\fR' will be used.
.PP
`\fBchandiscon = \*(L"mode\*(R"\fR'
When miau is disconnected from the server e.g. because of network
problem, miau can notify user about this in a couple of ways.
`\fBnothing\fR'
Only print server notice
.PP
`\fBnotice\fR'
Send notice to each channel
.PP
`\fBpart\fR'
Part each channel. mIRC users probably don't want to use this.
.PP
`\fBprivmsg\fR'
Only send a private message to the user
.PP
`\fBgetnick = \*(L"selection\*(R"\fR'
miau can try to reclaim your primary nick when it is lost. This
option may be one of the following:
`\fBnever\fR'
miau will not try to get your nick back
.PP
`\fBdetached\fR'
miau will try to get your nick when no clients are attached
.PP
`\fBattached\fR'
miau will try to get your nick when there are one or more
clients       attached
.PP
`\fBalways\fR'
miau will try to get your nick
Note: do _not_ use options `\fBattached\fR' and `\fBalways\fR' with clients
(like irc-II \s-1EPIC\s0) that automatically change your nick when they
receive `\fB\s-1ERR_NICKINUSE\s0\fR' from the server \- you might end up chaning
your nick until server drops your connection due excess (nick)
flood.
.PP
`\fBgetnickinterval = \*(L"seconds\*(R"\fR'
Time between tries (in seconds) to obtain currently (possibly)
lost primary nick. Don't set it too low or you might get kicked
out the server due to excess flood.
.PP
`\fBantiidle = \*(L"minutes\*(R"\fR'
Time between idle-timer resets in minutes. Set to 0 to disable.
.PP
`\fBqloglength = \*(L"minutes\*(R"\fR'
Age of oldest entry in quicklog in minutes. Set to zero to disable
quicklog.
.PP
Note: private messages get also logged into quicklog, but if
`\fBinbox\fR' is enabled, they are moved to messagelog instead of simply
dropping of from quicklog.
.PP
This option might not be compiled in.
.PP
`\fBtimestamp = \*(L"mode\*(R"\fR'
Location of timestamp in quicklog.
.PP
Available modes:
`\fBnone\fR'
No timestamp
.PP
`\fBbeginning\fR'
Timestamp in beginning of line
.PP
`\fBend\fR'
Timestamp at end of line
.PP
This options might not be compiled in.
.PP
`\fBflushqlog = \*(L"state\*(R"\fR'
If set to `\fBtrue\fR', quicklog will be written only when no clients are
connected and quicklog will be erased when client connects to
miau. If you are running a single client, you probably want to
leave this to `\fBfalse\fR'.
.PP
This option might not be compiled in.
.PP
`\fBinbox = \*(L"state\*(R"\fR'
Enables logging private messages when no clients are connected to
miau.
.PP
Note: if quicklog is enabled (see `\fBqloglength\fR'), private messages
are first stored in quicklog and moved to messagelog when they
become too old to be stored in quicklog.
.PP
This option might not be compiled in.
.PP
`\fBnevergiveup = \*(L"state\*(R"\fR'
If set to `\fBtrue\fR', miau will reset \*(L"working\*(R"\-status of servers to
working when all are set to dysfunctional.  Respectively, if set to
`\fBfalse\fR', miau will quit when all servers on the list have been set
to dysfunctional.
.PP
`\fBnorestricted = \*(L"state\*(R"\fR'
If set to `\fBtrue\fR', miau will not stay on server that forces user to
have restricted-status (+r).
.PP
`\fBreconnectdelay = \*(L"seconds\*(R"\fR'
Time (in seconds) between connection attempts.  Minumun value is
set to 1.
.PP
`\fBnickfillchar = \*(L"fill character\*(R"\fR'
Character used to modify your primary nick when all defined nicks
are already occupied. Note character is a single octet (byte) and
if longer string is fed, only the first character is used.
.PP
`\fBmaxnicklen = \*(L"length\*(R"\fR'
Maximum nick length, used with `\fBnickfillchar\fR'.
.PP
`\fBusermode = \*(L"usermode(s)\*(R"\fR'
Usermode that miau will request (if no clients are attached at the
moment) from the server when connection to the server is
established. Leave unset or set to empty to disable this feature.
.PP
`\fBforwardmsg = \*(L"command\*(R"\fR'
miau can collect the (private) messages within specified time (see
`\fBforwardtime\fR') and pipe them into the program specified. Leave this
unset or set to empty to disable this feature.
.PP
`\fBforwardtime = \*(L"seconds\*(R"\fR'
Time in seconds after first inserted line into forwardmsg queue
before piping the stuff out. Default is 180 seconds (or three
mintues).
.PP
`\fBignore = { \*(L"mask\*(R":\*(L"ignored\*(R" }\fR'
List of users whose private messages (\s-1PRIVMSG\s0) and noticies
(\s-1NOTICE\s0) are ignored when no clients are attached to miau. When
`\fBignored\fR' is left undefined, it is assumed to be `\fBtrue\fR'. Setting
`\fBignored\fR' to `\fBfalse\fR' means that this user will _not_ be ignored.
This list is processed as a chain.
.PP
Note: You can define \*(L"your\*(R" hostname with @@. Only the _last_
occurance of @@ will be translated.
.PP
`\fBprivlog = \*(L"mode\*(R"\fR'
Whatever private messages should be logged in nick-specific files.
Can be one of following:
`\fBnever\fR'
never write private message logs
.PP
`\fBdetached\fR'
write private message logs only when there are no clients
connected
.PP
`\fBattached\fR'
write private logs only when there are clients connected
.PP
`\fBalways\fR'
always write private message logs
.PP
All logfiles are written into miau's log directory (`\fBlogs\fR').
.PP
This option might not be compiled in.
.PP
`\fBchanlog = { \*(L"channel(s)\*(R":\*(L"options\*(R":\*(L"logfile\*(R" }\fR'
List of channel logfiles.
.PP
When channel is set to `\fB*\fR', line represents global log. When
logging, if channel doesn't have entry of it's own in this list,
it will use settings of global log and write log to it's own file.
When defining global log, `\fBlogfile\fR' is ignored. Each line can have
multiple channels (like `\fB#foobar,#miau\fR').
.PP
If logfile is left undefined, logfile will be named after the
channel with possible suffix (see `\fBlogsuffix\fR'). All filenames are
relative and are, by default, written in miau's log directory
(`\fBlogs\fR').
.PP
Options consist of abritary set of following possibilities:
`\fBj\fR'
log joins
.PP
`\fBe\fR'
log parts (exits)
.PP
`\fBq\fR'
log quits
.PP
`\fBm\fR'
log messages (privmsg/notice)
.PP
`\fBc\fR'
log mode changes
.PP
`\fBn\fR'
log nick changes
.PP
`\fBo\fR'
log misc events (other)
.PP
`\fBb\fR'
log messages from miau (bouncer)
.PP
`\fBa\fR'
log all of above
.PP
`\fBA\fR'
log when a client is attached
.PP
`\fBD\fR'
log when a client is detached
.PP
`\fBC\fR'
log continuously (status of clients doesn't matter)
.PP
Note that all channelless messages (such as \s-1QUIT\s0) are logged on
every active channel. This is a feature, not a bug.
.PP
This option might not be compiled in.
.PP
`\fBlogsuffix = \*(L"suffix\*(R"\fR'
When writing log to undefined logfile, each logfile consists of
channel name followed by suffix. Suffix can be defined here.
.PP
`\fBonconnect = { \*(L"mode\*(R":\*(L"target/data\*(R"(:\*(L"data\*(R") }\fR'
When miau connects and registers user to server, miau can send
pre-defined messages. User can define miau to send normal messages
(`\fB\s-1PRIVMSG\s0\fR'), notices (`\fB\s-1NOTICE\s0\fR') or arbitrary messages.
.PP
Mode can be one of the following:
`\fBp\fR'
private message (`\fB\s-1PRIVMSG\s0\fR').
.PP
`\fBn\fR'
notice (`\fB\s-1NOTICE\s0\fR'). Should be used with services and
automatons,   but unfortunately some network services can't
cope with notices.
.PP
`\fBr\fR'
\&\*(L"raw\*(R" message. This means user must provide complete message
to send to    the server. Using raw message user has complete
control over what is  being sent. If you don't know
what this is, you don't need this.  When      using modes "`\fBp\fR'\*(L" or
\&\*(R"`\fBn\fR'", user must provide both         message and target
where as with raw messages only one parameter in
addition to type should be given.
.PP
This option might not be compiled in.
.PP
`\fBautomodes = { \*(L"mask\*(R":\*(L"privilegded\*(R" }\fR'
List of people who are automatically given certain privilege on
channel. Mask is given in form of
`\fBmode:nick!username@host/#channel\fR' (where `\fBmode\fR' is a single
character) and list is processed as a chain.
.PP
Note: You can define \*(L"your\*(R" hostname with @@. Only the _last_
occurance of @@ will be translated.
.PP
This option might not be compiled in.
.PP
`\fBautomodedelay = \*(L"seconds\*(R"\fR'
Time (in seconds) after first queued mode change would take
effect. During this period of time miau can collect more than one
mode change and commit up to three at a time. Other situation
reasonaly big value (like 30) here could prove useful is channel
where there are stupid \*(L"auto\-oping\*(R" bots. (Stupid bots do mode
changes even if someone else did that already.)
.PP
This option might not be compiled in.
.PP
`\fBcmdpasswd = \*(L"password\*(R"\fR'
Password for remote commands. If this is 13 characters long, miau
assumes it's crypted. Comment this out or leave it empty to
disable remote commands. When sending miau a remote command,
password _always_ begins with column (':') (if `\fBcmdpasswd\fR' is set
to \*(L"foobar\*(R" (or hash of it), you need to send miau a message
beginning with `\fB:foobar\fR' to issue a remote command).  miau can
generate password-hashes with `\fB\-c\fR' \-switch, if it is compiled with
that feature.
.PP
This feature might not be compiled in.
.PP
`\fBdccbounce = \*(L"state\*(R"\fR'
miau can bounce DCCs. Set to true to enable bouncing.  You
probably don't need this.
.PP
This option might not be compiled in.
.PP
`\fBdccbindhost = \*(L"host\*(R"\fR'
If miau has separate IPs for IRC-network and clients, you should
enter \s-1IP\s0 for clients here.
.PP
This option might not be compiled in.
